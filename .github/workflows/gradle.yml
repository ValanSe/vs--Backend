name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

		## git ignore에 등록된 application.properties 파일 생성해주기
    - name: Create directory and file if not exist
      run: |
        mkdir -p ./src/main/resources
        echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml

		## 스프링 프로젝트 jar 파일 빌드
    - name: Set executable permission
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew bootJar

    ## Docker Hub에 이미지 push 하기
    - name: Docker build & push to prod
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/keep:0.0.1-SNAPSHOT .
        docker push ${{ secrets.DOCKER_USERNAME }}/keep:0.0.1-SNAPSHOT

		## Docker Hub에 Push한 이미지를 우분투 서버에 받아와서 run
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST_PROD }}
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }}
        envs: GITHUB_SHA
        script: |
          docker stop keep
          docker rm keep
          docker rmi ${{ secrets.DOCKER_USERNAME }}/keep:0.0.1-SNAPSHOT
          docker pull ${{ secrets.DOCKER_USERNAME }}/keep:0.0.1-SNAPSHOT
          docker run -d -p 8080:8080 --name keep ${{ secrets.DOCKER_USERNAME }}/keep:0.0.1-SNAPSHOT

